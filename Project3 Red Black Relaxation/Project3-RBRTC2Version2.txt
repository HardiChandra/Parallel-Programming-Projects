/* PROGRAM Jacobi */
#define n 32;
#define numiter 1000;
float A[n+2][n+2], B[n+2][n+2];
int i, j, stream higher[n+1], stream lower[n+1];
float seqstart, parstart;

void LocalBarrier(int i) {
	int dummy;
	if (i > 1) send(higher[i-1],1); /*send to Process i-1*/
	if (i < n) {
		send(lower[i+1],1);  /*send to Process i+1*/
		recv(higher[i],dummy); /*receive from Process i-1*/
	}
	if (i > 1) recv(lower[i],dummy); /*receivefrom Process i+1*/
}

main()
{
	/* array initialization */   
	for (i = 1; i <= n; i++)     
		for (j = 1; j <= n; j++)       
			A[i][j] = 0;   
	for (i = 0; i < n+2; i++) 
	{    
		A[i][0] = i; 
		A[0][i] = i;    
		A[n+1][i] = 33-i; 
		A[i][n+1] = 33-i;   
	}
	
	B=A;
	seqstart = seqtime();
	parstart = clock();
	forall i = 1 to n do 
	{ 	/*One process for each row*/
		int j,k, temp1, temp2;
		for(k=1; k<=numiter; k++)
		{	
			if(i%2==1)
			{
				temp1=1;
				temp2=2;
			}
			else
			{
				temp1=2;
				temp2=1;
			}
			for(j=temp1; j<=n; j+=2)
			{
				B[i][j] = (A[i-1][j] + A[i+1][j] + A[i][j-1] + A[i][j+1]) / 4;
			}
			LocalBarrier(i);
			A[i] = B[i];
			LocalBarrier(i);
			for(j=temp2; j<=n; j+=2)
			{
				B[i][j] = (A[i-1][j] + A[i+1][j] + A[i][j-1] + A[i][j+1]) / 4;
			}
			LocalBarrier(i);
			A[i] = B[i];
			LocalBarrier(i);
		}
	}
	cout.precision(5);
	cout << "Seqtime = " << seqtime() - seqstart << endl;
	cout << "Partime = " << clock() - parstart << endl;
	cout << "Speedup = " << (seqtime() - seqstart) / (clock() - parstart) << endl;
	cout << "Efficiency = " << (seqtime() - seqstart) / (clock() - parstart) / 33 << endl;
	cout << "Par Time Per Iteration = " << (clock() - parstart) / numiter << endl;
	
	/*
	for (i = 0; i < n+2; i++) 
	{
		for (j = 0; j < n+2; j++) 
		{
			cout << A[i][j];
		}
		cout << endl;
	}*/
}