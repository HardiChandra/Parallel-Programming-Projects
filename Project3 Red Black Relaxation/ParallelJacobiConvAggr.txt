#include<math.h>
#define tolerance 10
#define n 10;
float A[n+2][n+2], B[n+2][n+2], change, maxchange; 
int i, j; 
int stream higher[n+1], stream lower[n+1];
int count; 
spinlock Arrival, Departure; 
boolean globaldone;

void LocalBarrier(int i) {
	int dummy;
	if (i > 1) send(higher[i-1],1); /*send to Process i-1*/
	if (i < n) {
		send(lower[i+1],1);  /*send to Process i+1*/
		recv(higher[i],dummy); /*receive from Process i-1*/
	}
	if (i > 1) recv(lower[i],dummy); /*receive from Process i+1*/
}

boolean Aggregate(boolean mydone)  
{ 
	boolean result; /*Arrival Phase -Count the processes arriving*/ 
	Lock(Arrival); 
	count++;  
	globaldone= globaldone&& mydone; /*aggregation*/ 
	
	
	if (count < n) Unlock(Arrival); /*continue Arrival Phase*/ 
	else Unlock(Departure); /*end Arrival Phase*/ 
	
	/*Departure Phase -Count the processes leaving*/ 
	Lock(Departure); 
	count--;  
	result = globaldone; /*return “done”flag*/ 
	if (count > 0)	Unlock(Departure); /*continue Departure Phase*/ 
	else 
	{ 
		Unlock(Arrival);	/*terminate Departure Phase*/ 
		globaldone= true;	/*reset for new Aggregation*/ 
	} 
	return(result); 
}
                       
main( )  
{ 
	count = 0; /*Initialize “count”and spinlocks*/ 
	Unlock(Arrival);  
	Lock(Departure); 
	globaldone= false;  /*Initialize global flag*/ 

	/* Initialize array values */
	for (i = 1; i <= n; i++)
		for (j = 1; j <= n; j++)
			A[i][j] = 0;
	for (i = 0; i < n+2; i++) 
	{
		A[i][0] = 10; A[i][n+1] = 10; 
		A[0][i] = 10; A[n+1][i] = 10;
	}
	
	B = A; 
	forall i = 1 to n do  
	{ 
		/*Create the processes*/ 
		int j; 
		float change, maxchange; 
		boolean done; 
		do{ 
			maxchange= 0; 
			for (j = 1; j <= n; j++)  
			{ 
				/*compute new value for each point in my row*/ 
				B[i][j] = (A[i-1][j] + A[i+1][j] + A[i][j-1] + A[i][j+1]) / 4; 
				change = fabs( B[i][j] -A[i][j] ); 
				if (change > maxchange) maxchange= change; 
			} 
			LocalBarrier(i); 
			A[i] = B[i]; 
			done = Aggregate(maxchange<tolerance); 
		}while (!done); /*iterate until global termination*/ 
	} 
	
	cout.precision(2);
	for (i = 0; i < n+2; i++) 
	{
		for (j = 0; j < n+2; j++) 
		{
			cout << A[i][j];
		}
		cout << endl;
	}
} 