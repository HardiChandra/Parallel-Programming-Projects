/* PROGRAM ParallelJacobi */
#define n 32;
#define numiter 1;
float A[n+2][n+2], B[n+2][n+2];
int i,j,k;
float seqstart, parstart;
int count;
spinlock Arrival, Departure;

void Barrier()
{
	/* Arrival Phase - Count processes as they arrive */
	Lock(Arrival);
		count=count+1;
	if(count < n)
		Unlock(Arrival);	/* continue Arrival Phase */
	else
		Unlock(Departure); /* end Arrival Phase */
		
	/* Departure Phase - Count Processes as they leave */
	Lock(Departure);
		count = count - 1;
	if(count > 0)
		Unlock(Departure);
	else
		Unlock(Arrival);
}

main()
{
	count = 0;
	Unlock(Arrival);
	Lock(Departure);
	/* Initialize array values */
	for (i = 1; i <= n; i++)
		for (j = 1; j <= n; j++)
			A[i][j] = 0;
	for (i = 0; i < n+2; i++) 
	{
		A[i][0] = 10; A[i][n+1] = 10; 
		A[0][i] = 10; A[n+1][i] = 10;
	}
	
	B=A;
	
	seqstart = seqtime();
	parstart = clock();
	forall i=1 to n do
	{
		int j,k;
		for(k=1; k<=numiter; k++)
		{		
			for(j=1; j<=n; j++)
				/* Compute average of four neighbors */
				B[i][j] = (A[i-1][j] + A[i+1][j] + A[i][j-1] + A[i][j+1]) / 4;
			Barrier();
			A[i] = B[i];
			Barrier();
		}
	}
	cout << "Seqtime = " << seqtime() - seqstart << endl;
	cout << "Partime = " << clock() - parstart << endl;
	cout << "Speedup = " << (seqtime() - seqstart) / (clock() - parstart) << endl;
	/*
	cout.precision(2);
	for (i = 0; i < n+2; i++) 
	{
		for (j = 0; j < n+2; j++) 
		{
			cout << A[i][j];
		}
		cout << endl;
	}*/
}