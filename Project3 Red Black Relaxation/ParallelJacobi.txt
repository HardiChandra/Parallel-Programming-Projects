/* PROGRAM ParallelJacobi */
#define n 32;
#define numiter 2;
float A[n+2][n+2], B[n+2][n+2];
int i,j,k;
float seqstart, parstart;

main()
{
	/* Initialize array values */
	for (i = 1; i <= n; i++)
		for (j = 1; j <= n; j++)
			A[i][j] = 0;
	for (i = 0; i < n+2; i++) 
	{
		A[i][0] = 10; A[i][n+1] = 10; 
		A[0][i] = 10; A[n+1][i] = 10;
	}
	
	B=A;
	
	seqstart = seqtime();
	parstart = clock();
	for(k=1; k<=numiter; k++)
	{
		/* Phase I - Compute new values */
		forall i=1 to n do
		{
			/* A process for each row */
			int j;
			for(j=1; j<=n; j++)
				/* Compute average of four neighbors */
				B[i][j] = (A[i-1][j] + A[i+1][j] + A[i][j-1] + A[i][j+1]) / 4;
		}
		
		/* Phase II - Copy new values back to A */
		forall i = 1 to n do /* Copy values from B to A */
			A[i] = B[i];
	}
	cout << "Seqtime = " << seqtime() - seqstart << endl;
	cout << "Partime = " << clock() - parstart << endl;
	cout << "Speedup = " << (seqtime() - seqstart) / (clock() - parstart) << endl;
	/*
	cout.precision(2);
	for (i = 0; i < n+2; i++) 
	{
		for (j = 0; j < n+2; j++) 
		{
			cout << A[i][j];
		}
		cout << endl;
	}*/
}