/* PROGRAM ParallelJacobi */
#include<math.h>
#define n 10;
#define numiter 1;
#define tolerance .01;
float A[n+2][n+2], B[n+2][n+2];
int i,j;
float change, maxchange, seqstart, parstart;

main()
{
	/* Initialize array values */
	for (i = 1; i <= n; i++)
		for (j = 1; j <= n; j++)
			A[i][j] = 0;
	for (i = 0; i < n+2; i++) 
	{
		A[i][0] = 10; A[i][n+1] = 10; 
		A[0][i] = 10; A[n+1][i] = 10;
	}
	
	B=A;
	
	seqstart = seqtime();
	parstart = clock();
	do {
		/*compute new values until tolerance is reached*/
		maxchange=0;
		for(i=1; i<=n; i++)
			for(j=1; j<=n; j++)
			{
				/*compute new value and change over old value*/
				B[i][j] = (A[i-1][j]+A[i+1][j]+A[i][j-1]+A[i][j+1]) / 4;
				change = fabs(B[i][j] - A[i][j]);
				if(change > maxchange)
					maxchange=change;
			}	
		A=B;
	} while(maxchange > tolerance);
	cout << "Seqtime = " << seqtime() - seqstart << endl;
	cout << "Partime = " << clock() - parstart << endl;
	cout << "Speedup = " << (seqtime() - seqstart) / (clock() - parstart) << endl;
	
	cout.precision(2);
	for (i = 0; i < n+2; i++) 
	{
		for (j = 0; j < n+2; j++) 
		{
			cout << A[i][j];
		}
		cout << endl;
	}
}