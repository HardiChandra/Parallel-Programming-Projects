/* PROGRAM Jacobi */
#define n 10;
#define numiter 1;
float A[n+2][n+2], B[n+2][n+2];
int i, j, stream higher[n+1], stream lower[n+1];

void LocalBarrier(int i) {
	int dummy;
	if (i > 1) send(higher[i-1],1); /*send to Process i-1*/
	if (i < n) {
		send(lower[i+1],1);  /*send to Process i+1*/
		recv(higher[i],dummy); /*receive from Process i-1*/
	}
	if (i > 1) recv(lower[i],dummy); /*receivefrom Process i+1*/
}

main()
{
	/* Initialize array values */
	for (i = 1; i <= n; i++)
		for (j = 1; j <= n; j++)
			A[i][j] = 0;
	for (i = 0; i < n+2; i++) 
	{
		A[i][0] = 10; A[i][n+1] = 10; 
		A[0][i] = 10; A[n+1][i] = 10;
	}
	
	B=A;
	
	forall i = 1 to n do 
	{ /*One process for each row*/
		int j,k;
		for (k = 1; k <= numiter; k++) 
		{
			for (j = 1; j <= n; j++) 
				/*Compute average of four neighbors*/
				B[i][j] = (A[i-1][j]+A[i+1][j]+A[i][j-1]+A[i][j+1]) / 4;
				LocalBarrier(i);
				A[i] = B[i];
				LocalBarrier(i);
		}
	}
	
	cout.precision(2);
	for (i = 0; i < n+2; i++) 
	{
		for (j = 0; j < n+2; j++) 
		{
			cout << A[i][j];
		}
		cout << endl;
	}
}